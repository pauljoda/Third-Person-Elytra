buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

version = '1.2'
group = 'com.pauljoda.thirdpersonelytra' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'thirdpersonelytra'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
}

minecraft {
    mappings channel: 'snapshot', version: project.MAPPINGS
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                thirdpersonelytra {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                thirdpersonelytra {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    deployerJars
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.2-' + project.forge_version
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.8'
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }
    extension = 'jar'
    classifier = 'dev'
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

task javadocJar(type: Zip, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task sourceJarJava(type: Jar, dependsOn: "classes") {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives devJar
    archives sourceJarJava
    archives javadocJar
    archives deobfJar
}

repositories {
    mavenCentral()
}
//
//dependencies {
//    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
//}
//

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pauljoda/Third-Person-Elytra")
            credentials {
                username = "pauljoda"
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "thirdpersonelytra",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
